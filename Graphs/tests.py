from os import getcwd
from sys import path as sys_path

sys_path.append(getcwd())

from AdjacencyList import *
from AdjacencyMatrix import *

# print ("# ---- POR MATRIZ DE ADJACÊNCIA -----")
# x = AdjMatrixGraph(4, 'n-direcionado')
# x.addEdge(2, 1)
# x.addEdge(2, 0)

# print('teste:')
# x.showGraph()
# x.existsEdge(2, 1)
# x.getAdjacents(2)
# y = AdjMatrixGraph(-2, 'n-direcionado')
# y.edgesNumber()
# # y.nodeDegree('iai')
# y.showGraph()
# print ("# ---- POR LISTAS DE ADJACÊNCIA -----")
# t1 = AdjListGraph(['A', 'B', '7'], 'direcionado')
# t1.addEdge('A', 'A')
# t1.showGraph()
# t1.showGraph()
# # t1.addEdge('B', '7')
# t1.showGraph()
# t1.addEdge('B', '7')
# t1.addEdge('B', 'A')
# t1.addEdge('B', 'B')
# # t1.existsEdge('C', '7')
# print("teste aki: ")
# t1.showGraph()
# t1.edgesNumber()
# t1.nodeDegree('B')

# print("TESTE 2")
# xx = AdjListGraph([0, 2, 4, 3], 'n-direcionado')
# xx.addEdge(0, 4)
# xx.showGraph()
# xx.addEdge(4, 2)
# # xx.addEdge(4, 4)
# xx.showGraph()
# xx.edgesNumber()
# xx.getAdjacents(4)
# xx.nodeDegree(4)
# print("-------------")
# y = AdjMatrixGraph(8, 'n-direcionado')
# y.showGraph()
# y.addEdge(4,2)
# y.existsEdge(2,4)
# y.showGraph()

# print("Teste do vazio")
# xy = AdjListGraph([], 'direcionado')
# xy.showGraph()
# xy.edgesNumber()
# xy.addEdge('A', 'A')
# aaa = Node(24)
# print(aaa)

listGraph = AdjListGraph([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'direcionado')
print(listGraph)
listGraph.addEdge(1, 2)
listGraph.addEdge(3, 4)
listGraph.addEdge(5, 6)
listGraph.addEdge(1, 7)
listGraph.addEdge(3, 5)
listGraph.addEdge(7, 9)
listGraph.addEdge(6, 9)
listGraph.addEdge(7, 8)
listGraph.addEdge(2, 3)
listGraph.addEdge(0, 1)
